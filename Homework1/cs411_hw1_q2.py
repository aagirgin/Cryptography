# -*- coding: utf-8 -*-
"""CS411_HW1_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Ui9WNRHrYEsD4T5K290rTfDZ20eua_I
"""

from IPython.utils.path import get_ipython_package_dir
from typing_extensions import NewType
import math
import random
import fractions


# ZJOWMJ ZJGC BS UEVRSCC, KSZ ZJSFS GC USZJOV GR GZ.
text = "ZJOWMJ ZJGC BS UEVRSCC, KSZ ZJSFS GC USZJOV GR GZ."

lowercase = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7, 'i':8,
         'j':9, 'k':10, 'l':11, 'm':12, 'n':13, 'o':14, 'p':15, 'q':16,
         'r':17, 's':18,  't':19, 'u':20, 'v':21, 'w':22, 'x':23, 'y':24,
         'z':25}

uppercase ={'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8,
         'J':9, 'K':10, 'L':11, 'M':12, 'N':13, 'O':14, 'P':15, 'Q':16,
         'R':17, 'S':18,  'T':19, 'U':20, 'V':21, 'W':22, 'X':23, 'Y':24,
         'Z':25}

inv_lowercase = {0:'a', 1:'b', 2:'c', 3:'d', 4:'e', 5:'f', 6:'g', 7:'h', 8:'i',
         9:'j', 10:'k', 11:'l', 12:'m', 13:'n', 14:'o', 15:'p', 16:'q',
         17:'r', 18:'s', 19:'t', 20:'u', 21:'v', 22:'w', 23:'x', 24:'y',
         25:'z'}

inv_uppercase = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H',
                 8:'I', 9:'J', 10:'K', 11:'L', 12:'M', 13:'N', 14:'O', 15:'P',
                 16:'Q', 17:'R', 18:'S', 19:'T', 20:'U', 21:'V', 22:'W', 23:'X',
                 24:'Y', 25:'Z'}

letter_count = {'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0, 'G':0, 'H':0, 'I':0,
         'J':0, 'K':0, 'L':0, 'M':0, 'N':0, 'O':0, 'P':0, 'Q':0,
         'R':0, 'S':0,  'T':0, 'U':0, 'V':0, 'W':0, 'X':0, 'Y':0, 'Z':0}


class key(object):
    alpha=0
    beta=0
    gamma=0
    theta=0

# The extended Euclidean algorithm (EEA)
def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

# Modular inverse algorithm that uses EEA
def modinv(a, m):
    if a < 0:
        a = m+a
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

def Affine_Dec(ptext, key):
    plen = len(ptext)
    ctext = ''
    for i in range (0,plen):
        letter = ptext[i]
        if letter in lowercase:
            poz = lowercase[letter]
            poz = (key.gamma*poz+key.theta)%26
            #print poz
            ctext += inv_lowercase[poz]
        elif letter in uppercase:
            poz = uppercase[letter]
            poz = (key.gamma*poz+key.theta)%26
            ctext += inv_uppercase[poz]
        else:
            ctext += ptext[i]
    return ctext
def mostused(text):
  d = {}
  for element in text:
    if element in d:
      d[element] += 1
    elif element == " " or element == "," or element == ".":
      continue
    else:
      d[element] = 1
  return d

print("Number of occurances:", mostused(text))

# ZJOWMJ ZJGC BS UEVRSCC, KSZ ZJSFS GC USZJOV GR GZ.
# Most used "T" in plaintext
# For one to one match most used letter in ciphertext is Z or S according to mostused function.
# T = 19   
# Z = 25 or S = 18
# For decription -> Known pair (19,25) or Known pair(19,18)
# Possible alfa values ->  [1,3,5,7,9,11,13,17,19,21,23,25]

def findrelprimes(num):
  retlist = []
  for i in range(num):
    gcd, x, y = egcd(i, num)
    if gcd == 1:
      retlist.append(i)
  return retlist

def affine_decription_loop(text,betaval):
  posalfa = findrelprimes(26)
  for element in posalfa:
    key.alpha = element
    key.beta = betaval - (19 * element) % 26
    key.gamma = modinv(key.alpha, 26)
    key.theta = 26 - (key.gamma * key.beta) % 26
    print("Possible Text -> ",Affine_Dec(text, key),"Alpha:",key.alpha,"Beta:",key.beta,"Gamma:",key.gamma,"Theta:",key.theta)

affine_decription_loop("ZJOWMJ ZJGC BS UEVRSCC, KSZ ZJSFS GC USZJOV GR GZ.",18)
affine_decription_loop("ZJOWMJ ZJGC BS UEVRSCC, KSZ ZJSFS GC USZJOV GR GZ.",25)

print("\nAnswer is THOUGH THIS BE MADNESS, YET THERE IS METHOD IN IT. Alpha: 23 Beta: 4 Gamma: 17 Theta: 10")